###################################################

# default target list
SHLIB=libLArliteCV${PACKAGE_NAME}.so
ROOTMAP=$(SHLIB:.so=.rootmap)
LARLITECV_BASIC_ROOTLIBS = $(shell root-config --libs)
LARLITECV_BASIC_ROOTINC  = $(shell root-config --cflags)

PACKAGE_BUILDDIR = $(LARLITECV_BUILDDIR)/$(PACKAGE_NAME)
PACKAGE_INCDIR   = $(LARLITECV_INCDIR)/$(PACKAGE_NAME)
$(shell mkdir -p $(LARLITECV_BUILDDIR))
$(shell mkdir -p $(LARLITECV_LIBDIR))
$(shell mkdir -p $(LARLITECV_BINDIR))
$(shell mkdir -p $(PACKAGE_BUILDDIR))
$(shell mkdir -p $(PACKAGE_INCDIR))

DICT    = $(PACKAGE_BUILDDIR)/$(PACKAGE_NAME)Dict
OBJECTS = $(addprefix $(PACKAGE_BUILDDIR)/, $(SOURCES:.cxx=.o))

all: pre_build main_build pkg_build 

pre_build:

main_build: .depend pre_build $(DICT).o $(OBJECTS) $(LARLITECV_LIBDIR)/$(ROOTMAP) install_header

# default rule for making .o files from .cxx files
$(PACKAGE_BUILDDIR)/%.o: %.cxx %.h
	@echo '<< compiling' $< '>>'
#	@echo $(CXX) $(CXXFLAGS) $(LARLITECV_BASIC_ROOTINC) $(INCFLAGS) -c $< -o $@
	@$(CXX) $(CXXFLAGS) $(LARLITECV_BASIC_ROOTINC) $(INCFLAGS) -c $< -o $@

$(DICT).o: $(DICT).cxx
	@echo '<< compiling' $(PACKAGE_NAME)Dict.cxx '>>'
#	@echo $(CXX) $(CXXFLAGS) $(LARLITECV_BASIC_ROOTINC) $(INCFLAGS) -c $< -o $@
	@$(CXX) $(CXXFLAGS) $(LARLITECV_BASIC_ROOTINC) $(INCFLAGS) -c $< -o $@

ifdef LARLITECV_ROOT6

# root class dictionary
$(DICT).cxx: $(HEADERS) LinkDef.h
	@echo '<< generating dict >>'
#	@echo rootcling -f $(DICT).cxx -s $(LARLITECV_LIBDIR)/$(SHLIB) -rml $(SHLIB) -rmf $(LARLITECV_LIBDIR)/$(ROOTMAP) $(CINTFLAGS) -c $(INCFLAGS) $(HEADERS) LinkDef.h	
	@rootcling -f $(DICT).cxx -s $(LARLITECV_LIBDIR)/$(SHLIB) -rml liblarlitecv.so -rmf $(LARLITECV_LIBDIR)/$(ROOTMAP) $(CINTFLAGS) -c $(INCFLAGS) $(HEADERS) LinkDef.h

# install headers
install_header: $(OBJECTS) $(DICT).o
	@echo '<< installing headers >>'
	@$(foreach f, $(HEADERS),$(shell cp $(f) $(PACKAGE_INCDIR)/))

$(LARLITECV_LIBDIR)/$(ROOTMAP):
	
else

# root class dictionary
$(DICT).cxx: $(HEADERS) LinkDef.h
	@echo '<< generating dict >>'
#	@echo rootcint -f $(DICT).cxx -c $(CINTFLAGS) $(INCFLAGS) $(HEADERS) LinkDef.h
	@rootcint -f $(DICT).cxx -c $(CINTFLAGS) $(INCFLAGS) $(HEADERS) LinkDef.h

# if ROOTMAP defined, define rule for making it
$(LARLITECV_LIBDIR)/$(ROOTMAP): $(OBJECTS) $(DICT).o
	@echo "<< generating rootmap >>"
	@rlibmap -f  -o $(LARLITECV_LIBDIR)/$(ROOTMAP) -l $(LARLITECV_LIBDIR)/liblarlitecv.so -c LinkDef.h

# install headers
install_header: .depend #$(OBJECTS) $(DICT).o
	@echo '<< installing headers >>'
	@$(foreach f, $(HEADERS),$(shell cp $(f) $(PACKAGE_INCDIR)/))

endif

###################################################

# "make clean" target
clean: pre_clean pkg_clean
	@echo '<< cleaning all >>'
	@rm -f .depend
	@rm -f $(PACKAGE_BUILDDIR)/*
	@rm -f $(LARLITECV_LIBDIR)/$(SHLIB) $(LARLITECV_LIBDIR)/$(SHLIB:.so=.rootmap) $(LARLITECV_LIBDIR)/$(SHLIB:.so=_rdict.pcm)

pre_clean: 

###################################################
libclean:
	@echo '<< cleaning lib directory >>'
	@rm -f $(LARLITECV_LIBDIR)/$(SHLIB) 
	@rm -f lib/$(SHLIB) 

###################################################
clearCINT:
	@echo '<< removing CINT >>'
	@rm -f $(DICT).*


###################################################
# auto-generate dependencies using g++ -M
.depend: $(SOURCES) $(HEADERS)
	@rm -f .depend
	@echo '<< checking dependencies>>'
	@$(CXX) -M $(CXXFLAGS) $(LARLITECV_BASIC_ROOTINC) $(INCFLAGS) $(SOURCES) > .depend

-include .depend

#ALWAYS:
